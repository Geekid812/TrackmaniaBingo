# This file is automatically @generated by the `typegen` tool.
# Do not manually edit it! See `common/types.xml` for details.

from datetime import datetime, timedelta
from enum import Enum
from typing_extensions import Annotated

from pydantic import BaseModel, PlainSerializer, BeforeValidator

def timedelta_convert(v: int | object):
    if isinstance(v, int):
        return timedelta(milliseconds=v)
    return v

color = list[int]
TimedeltaMilliseconds = Annotated[
    timedelta,
    BeforeValidator(timedelta_convert, json_schema_input_type=int)
]

# Supported game platforms in Bingo.
class GamePlatform(Enum):
    NEXT = 0

# Available map selection modes.
class MapMode(Enum):
    RANDOMTMX = 0
    TAGS = 1
    MAPPACK = 2
    CAMPAIGN = 3

# A Trackmania medal ranking.
class Medal(Enum):
    AUTHOR = 0
    GOLD = 1
    SILVER = 2
    BRONZE = 3
    NONE = 4

# A selection of game rules.
class Gamemode(Enum):
    STANDARD = 0
    FRENZY = 1

# When a connection to the server fails, give the client a hint of what it should do.
class HandshakeFailureIntentCode(Enum):
    SHOWERROR = 0
    REQUIREUPDATE = 1
    REAUTHENTICATE = 2

# A powerup from the Frenzy gamemode.
class Powerup(Enum):
    EMPTY = 0

# A simple reference to a registered player.
class PlayerRef(BaseModel):
    uid: int
    name: str

# A player's detailed profile.
class PlayerProfile(BaseModel):
    uid: int
    name: str
    account_id: str
    created_at: datetime
    last_played_at: datetime
    country_code: str
    title: str | None
    games_played: int
    games_won: int

# Room parameters set by the host.
class RoomConfiguration(BaseModel):
    name: str
    public: bool
    randomize: bool
    size: int
    host_control: bool

# Match parameters set by the host.
class MatchConfiguration(BaseModel):
    game: GamePlatform = GamePlatform.NEXT
    mode: Gamemode = Gamemode.STANDARD
    grid_size: int = 5
    selection: MapMode = MapMode.RANDOMTMX
    target_medal: Medal = Medal.AUTHOR
    time_limit: TimedeltaMilliseconds
    no_bingo_duration: TimedeltaMilliseconds
    overtime: bool = True
    late_join: bool = True
    rerolls: bool = True
    competitve_patch: bool
    mappack_id: int | None
    campaign_selection: list[int] | None
    map_tag: int | None = 1

# Request to open a connection by the client using an exisiting token.
class HandshakeRequest(BaseModel):
    version: str
    game: GamePlatform
    token: str

# Request to generate a client token with the provided credientials.
class KeyExchangeRequest(BaseModel):
    key: str
    display_name: str
    account_id: str

# A map identifier for an official campaign.
class CampaignMap(BaseModel):
    campaign_id: int = -1
    map: int = -1

# A message sent by a player in a text chat.
class ChatMessage(BaseModel):
    uid: int
    name: str
    title: str | None
    timestamp: datetime
    content: str
    team_message: bool

# One of the available options in a poll.
class PollChoice(BaseModel):
    text: str
    color: color

# A set of choices to which players can answer.
class Poll(BaseModel):
    id: int
    title: str
    color: color
    duration: TimedeltaMilliseconds
    choices: list[PollChoice]
